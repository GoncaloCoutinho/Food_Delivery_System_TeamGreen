
//The following line reads the file from the csv folder. The csv file is loaded 
//in the following manner: E:\Download\Neo4j Desktop\relate-data\dbmss\dbms-2e3bd127-2678-4fcb-8b25-797df3805e69\import

LOAD CSV WITH HEADERS FROM "file:///restaurant_data.csv" AS data

//creating 3 nodes and setting the properties of the nodes
MERGE(n1:Customer{name:data.Name, latitude:toFloat(data.Latitude),longitude:toFloat(data.Longitude)})
MERGE(n2:Orders{orderid:data.Order_ID,ordertimestamp: apoc.date.parse(data.Order_ts,'ms', 'dd-MM-yyyy HH:mm'),foodname:data.Food_Item})
MERGE(n3:Restaurant{restaurantname:data.Restaurant, restlat:toFloat(data.Rest_lat), restlong:toFloat(data.Rest_long)})

//Creating relationships between the nodes
MERGE (n1)-[r1:PLACES_ORDER]->(n2)
MERGE (n2)-[r2:BELONGS_TO]->(n3)
RETURN *;

//To show all the nodes along with relationship
MATCH(n) RETURN (n)


//Cypher query to search the restaurant for a particular customer-Angy who is logged in
MATCH(c:Customer{name:"Angy"})-[:PLACES_ORDER]->(o:Orders)

//Getting last 5 orders of that customer
WITH o ORDER BY o.ordertimestamp DESC LIMIT 5 
WITH [o.foodname] as foods

//matching the restaurent
MATCH (r:Restaurant)<-[:BELONGS_TO]-(o:Orders)
WHERE (o.foodname in foods) AND NOT (:Customer{name:"Angy"})-[:PLACES_ORDER]->(o:Orders)-[:BELONGS_TO]->(r:Restaurant)

// These are the recommendations shown to the user
RETURN distinct r.restaurantname,foods


// A modified query which is also returning recommendations of the restaurants 
// based on the food choice

MATCH(c:Customer{name:"Ania"})-[:PLACES_ORDER]->(o:Orders)
WITH o ORDER BY o.ordertimestamp DESC LIMIT 5
WITH [o.foodname] as foods
MATCH (r:Restaurant)<-[:BELONGS_TO]-(o:Orders{foodname:"Pommes"})
WHERE (o.foodname in foods) AND NOT (:Customer{name:"Ania"})-[:PLACES_ORDER]->(o:Orders)-[:BELONGS_TO]->(r:Restaurant)
RETURN distinct r.restaurantname,foods